// Note: This file was auto-generated by SocketStream at 1363169156961
// Do not modify!

module.exports = function(app) {

  // PASS THROUGH CONFIG
  app.env = 'development';

  // DEFINE TRANSPORT
  app.transport(function (client) {

      var parser = require('ss-message-parser')();

      var socket = new eio('ws://localhost:3001');

      socket.on('open', function(){
        return client.status.emit('open');
      });

      socket.on('ready', function() {
        return client.status.emit('ready');
      });

      socket.on('disconnect', function() {
        return client.status.emit('disconnect');
      });

      socket.on('reconnect', function() {
        return client.status.emit('reconnect');
      });

      socket.on('connect', function() {
        return client.status.emit('connect');
      });

      socket.on('message', function(msg) {
        console.log('Message in from server:', msg);
        var msgAry = parser.parse(msg);
        client.services.services[msgAry[0]].read(msgAry[1]);
      });

      // Return Send Method
      return function(serviceId, content) {
        var msg = parser.serialize([serviceId, content]);
        socket.send(msg);
      };

    });

  // DEFINE SERVICES

  // livereload service
  app.services.register({"id":0,"name":"livereload","config":{}}, function (client) {

  client.onmessage = function(msg) {

    // Reload browser if reload system event received
    switch (msg) {
      case 'reload':
        window.location.reload();
        break;
      case 'updateCSS':
        var tags = document.getElementsByTagName("link");
        for (var i = 0; i < tags.length; i++) {
          var tag = tags[i];
          if (tag.rel.toLowerCase().indexOf("stylesheet") >= 0 && tag.href) {
            var h = tag.href.replace(/(&|%5C?)\d+/, "");
            tag.href = h + (h.indexOf("?") >= 0 ? "&" : "?") + (new Date().valueOf());
          }
        }
        break;
    }
  };

});

  // pubsub service
  app.services.register({"id":1,"name":"pubsub","config":{"json":true}}, function(client) {

  var EE = require('events').EventEmitter;
  var ee = new EE();

  client.onmessage = function(obj) {
    ee.emit(obj.e, obj.p);
  };

  return ee;

});

  // rpc service
  app.services.register({"id":2,"name":"rpc","config":{"json":true,"callbacks":true}}, function(client) {

  function defaultCallback(x) {
    return console.log(x);
  }

  // Handle incoming responses
  client.onmessage = function(obj, cb) {
    if (obj.e) {
      console.error('SocketStream RPC server error:', obj.e.message);
    } else {
      cb.apply(cb, obj.p);
    }
  };

  // Return API to call functions on the server
  return function() {
    var args = Array.prototype.slice.call(arguments);

    var msg = { m: args[0] };
    var lastArg = args[args.length - 1];

    var cb;
    if (typeof lastArg === 'function') {
      msg.p = args.slice(1, args.length - 1);
      cb = lastArg;
    } else {
      msg.p = args.slice(1);
      cb = defaultCallback;
    }

    client.write(msg, cb);

    // Always return 'undefined'      
    return void 0;
  };

});

  // tweetStream service
  app.services.register({"id":3,"name":"tweetStream","config":{}}, function(client) {

  var Stream = require('stream');

  // Only Streams1 in Browserify for now :-(
  var s = new Stream();

  s.readable = true;
  s.writable = true;

  client.onmessage = function(msg) {
    //console.log('message in from stream service!', msg);
    s.emit('data', msg);
  };

  s.write = function(buf) {
    client.write(buf);
  };

  return s;

});

  return app;
};
